// 18.3 비동기 작업을 처리하는 미들웨어 사용

// 1. redux-thunk
// 비동기 작업을 처리할 때 가장 많이 사용하는 미들웨어
// 객체가 아닌 함수 형태의 액션을 디스패치할 수 있게 해줌

// 2. redux-saga
// redux-thunk 다음으로 가장 많이 사용되는 비동기 작업 관련 미들웨어 라이브러리
// 특정 액션이 디스패치되었을 때 정해진 로직에 따라 다른 액션을 디스패치시키는 규칙을 작성하여
// 비동기 작업을 처리할 수 있게 해줌

// 18.3.1 redux-thunk

// redux-thunk는 리덕스를 사용하는 프로젝트에서 비동기 작업을 처리할 때 가장 기본적으로 사용하는 미들웨어

// 18.3.1.1 Thunk란?
// Thunk는 특정 작업을 나중에 할 수 있도록 미루기 위해 함수 형태로 감싼 것을 의미함

// 18.3.2 redux-saga

// redux-thunk 다음으로 많이 사용하는 비동기 작업 관련 미들웨어

// redux-saga를 사용하는 것이 더 유리한 상황
// 1. 기존 요청을 취소 처리해야 할 때 (불필요한 중복 요청 방지)
// 2. 특정 액션이 발생했을 때 다른 액션을 발생시키거나, API 요청 등 리덕스와 관계없는 코드를 실행할 때
// 3. 웹소켓을 사용할 때
// 4. API 요청 실패 시 재요청해야 할 때

// 18.3.2.1 제너레이터 함수 이해하기
// 제너레이터 함수는 ES6에 추가된 함수이며,
// 해당 문법의 핵심 기능은 함수를 작성할 때 함수를 특정 구간에 멈춰 놓을 수 있고,
// 원할 때 다시 돌아가게 할 수도 있음

// redux-saga는 제너레이터 함수 문법을 기반으로 비동기 작업을 관리해 준다

// 18.4 정리

// 비동기 작업을 처리할 때 redux-thunk는 일반 함수로 이루어져 있기 때문에 간단명로하다는 장점이 있고,
// redux-saga는 진입 장벽이 조금 있을 수 있으나 복잡한 상황에서 더욱 효율적으로 작업을 관리 할 수 있음

// redux-promise-middleware, redux-pender, redux-observable와 같은 미들웨어도 존재함

// 미들웨어를 사용하지 않고 그냥 컴포넌트단에서 API를 요청하는 것도 틀린 방법은 아님
// 비동기 작업을 처리할 때 리덕스 미들웨어를 사용하는 이유는 결국 좀 더 편하게 처리하기 위해서임
// 자신이 불편하다고 느낀다면 사용하지 않는 편이 좋을 수도 있음
