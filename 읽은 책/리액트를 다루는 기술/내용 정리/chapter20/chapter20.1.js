// 20.1 서버 사이드 렌더링의 이해

// 서버 사이드 렌더링은 UI를 서버에서 렌더링하는 것을 의미함
// 서버 사이드 렌더링을 구현하면 사용자가 웹 서비스에 방문했을 때 서버 쪽에서 초기 렌더링을 대신해줌
// 사용자가 html을 전달받을 때 그 내부에 렌더링된 결과물이 보임

// 20.1.1 서버 사이드 렌더링의 장점

// 1. 구글, 네이버, 다음 등의 검색 엔진이 우리가 만든 웹 어플리케이션의 페이지를 원활하게 수집 가능
// - 리액트로 만든 SPA는 검색 엔진 크롤러 봇처럼 자바스크립트가 실행되지 않는 환경에서는 페이지가 제대로 안나타남
// - 서버에서 클라이언트 대신 렌더링을 해 주면 검색 엔진이 페이지의 내용을 제대로 수집해감
// - 구글 검색 엔진은 자바스크립트를 실행하는 기능이 탑재되어 제대로 페이지를 크롤링해 갈 때도 있지만,
// 모든 페이지에 대해 자바스크립트를 실행해 주지는 않음
// - 웹 서비스의 검색 엔진 최적화를 위해서라면 서버 사이드 렌더링을 구현해 주는 것이 좋음

// 2. 초기 렌더링 성능을 개선할 수 있음
// - 서버 사이드 렌더링이 구현되지 않은 웹 페이지에 사용자가 방문하면, 자바스크립트가 로딩되고 실행될 때까지
// 사용자는 비어 있는 페이지를 보며 대기해야 하고, API 호출까지 하게 되면 대기 시간은 더욱 길어짐
// - 서버 사이드 렌더링으로 구현한 웹 페이지는 자바스크립트 파일 다운로드가 완료되지 않은 시점에서도
// html상에 사용자가 볼 수 있는 컨텐츠가 있기 때문에 대기 시간이 최소화되고, 결국 사용자 경험을 향상시킴

// 20.1.2 서버 사이드 렌더링의 단점

// 1. 서버 사이드 렌더링은 결국 원래 브라우저가 해야 할 일을 서버가 대신 처리하는 것이므로 서버 리소스가 사용됨
// - 갑자기 수많은 사용자가 동시에 웹 페이지에 접속하면 서버에 과부하가 발생함
// - 사용자가 많은 서비스라면 캐싱과 로드 밸런싱을 통해 성능을 최적화해 주어야 함

// 2. 서버 사이드 렌더링을 하면 프로젝트의 구조가 좀 더 복잡해질 수 있고
// 데이터 미리 불러오기, 코드 스플리팅과의 호환 등 고려해야 할 사항이 더 많아져서 개발이 더 어려워짐

// 20.1.3 서버 사이드 렌더링과 코드 스플리팅 충돌

// 별도의 호환작업 없이 서버 사이드 렌더링과 코드 스플리팅을 적용하면, 다음과 같은 흐름으로 작동하면서 페이지가 깜빡임
// 1. 서버 사이드 렌더링된 결과물이 브라우저에 나타남
// 2. 자바스크립트 파일 로딩 시작
// 3. 자바스크립트가 샐행되면서 아직 불러오지 않은 컴포넌트를 null로 렌더링함
// 4. 페이지에서 코드 스플리팅된 컴포넌트들이 사라짐
// 5. 코드 스플리팅된 컴포넌트들이 로딩된 이후 제대로 나타남

// 해당 문제를 해결하려면 라우트 경로마다 코드 스플리팅된 파일 중에서 필요한 모든 파일을 브라우저에서
// 렌더링하기 전에 미리 불러와야 함

// 해당 문제를 해결하기 위한 방법으로 Loadable Components 라이브러리에서 제공하는 기능을 써서
// 서버 사이드 렌더링 후 필요한 파일의 경로를 추출하여 렌더링 결과에 스크립트/스타일 태그를 삽입해주는 방식을 사용

// 20.6 서버 사이드 렌더링의 환경 구축을 위한 대안

// 서버 사이드 렌더링 자체만 놓고 보면 꽤나 간단한 작업이지만 데이터 로딩, 코드 스플리팅까지하면 참 번거로운 작업임

// 20.6.1 Next.js

// Next.js라는 리액트 프레임워크를 사용하면 이 작업을 최소한의 설정으로 간단하게 처리할 수 있음
// 몇 가지 제한이 존재함
// 1. react-router와 호환되지 않음
// - 리액트 라우터는 컴포넌트 기반으로 라우트를 설정하는 반면에 Next.js는 파일 시스템에 기반으로 라우트를 설정함

// 많은 복잡한 작업들을 모두 Next.js가 대신해주기 때문에 실제 작동 원리 파악하기 힘들어짐
// 코드 스플리팅, 데이터 로딩, 서버 사이드 렌더링을 가장 쉽게 적용하고 싶다면 Next.js를 추천함

// Next.js의 라우팅 방식보다 리액트 라우터의 라우팅 방식을 더 좋아하거나, 기존의 프로젝트에 적용해야 하거나,
// 혹은 작동 원리를 제대로 파악하면서 구현하고 싶다면 직접 구현하는 것이 가장 좋음

// 20.7 정리
// 서버 사이드 렌더링은 꼭 해야 하는 작업은 아님
// 하지만 서비스를 사용하는 사람이 많고, 검색 엔진 최적화 및 사용자 경험을 향상시키길 원한다면
// 도입을 충분히 고려해 볼 만한 기술임
// 하지만 프로젝트가 조금 복잡해질수는 있음
