// 19 코드 스플리팅

// 리액트 프로젝트를 완성하여 사용자에게 제공할 때는 빌드 작업을 거쳐서 배포해야 함
// 빌드 작업을 통해 프로젝트에서 사용되는 자바스크립트 파일 안에서 불필요한 주석, 경고 메세지, 공백 등을 제거하여
// 파일 크기를 최소화하기도 하고, 브라우저에서 JSX 문법이나 다른 최신 자바스크립트 문법이
// 원활하게 실행되도록 코드의 트랜스파일 작업도 할수 있음

// 해당 작업은 웹팩(webpack)이라는 도구가 담당함
// 별도로 웹팩을 설정해주지 않으면 프로젝트에서 사용 중인 모든 자바스크립트 파일이 하나의 파일로 합쳐지고,
// 모든 CSS 파일도 하나의 파일로 합쳐짐

// 코드 스플리팅을 하는 이유
// 어플리케이션의 규모가 커지면 지금 당장 필요하지 않은 컴포넌트 정보도 모두 불러오면서 파일의 크기가 매우 커짐
// 로딩이 오래 걸리기 때문에 사용자 경험도 안 좋아지고 트래픽도 많이 나오게됨

// 해당 문제점을 해결하는 방법이 코드 스플리팅의 방법중 하나인 코드 비동기 로딩임
// 코드 비동기 로딩을 통해 자바스크립트 함수, 객체, 혹은 컴포넌트를 처음에는 불러오지 않고
// 필요한 시점에 불러와서 사용할 수 있음

// 19.2 React.lazy와 Suspense를 통한 컴포넌트 코드 스플리팅
// 코드 스플리팅을 위해 리액트에 내장된 기능으로 유틸 함수인 React.lazy와 컴포넌트인 Suspense가 있음

// 19.2.3 Loadable Components를 통한 코드 스플리팅
// Loadable Components는 코드 스플리팅을 편하게 하도록 도와주는 서드파티 라이브러리
// 해당 라이브러리의 장점은 React.lazy와 Suspense와 달리 서버 사이드 렌더링을 지원한다는 것
// 렌더링하기 전에 필요할 때 스플리팅된 파일을 미리 불러올 수 있는 기능도 존재

// 서버 사이드 렌더링이란
// 1. 웹 서비스의 초기 로딩 속도 개선, 캐싱 및 검색 엔진 최적화를 가능하게 해 주는 기술
// 2. 웹 서비스의 초기 렌더링을 사용자의 브라우저가 아닌 서버 쪽에서 처리함
// 3. 사용자는 서버에서 렌더링한 html 결과물을 받아 와서 그대로 사용하기 때문에 로딩속도도 개선되고,
// 검색 엔진에서 크롤링할 때도 문제가 없음

// 19.3 정리
// 서버 사이드 렌더링을 할 계획이 없다면 React.lazy와 Suspense로 구현하고,
// 계획이 있다면 Loadable Components를 사용해야 합니다.
