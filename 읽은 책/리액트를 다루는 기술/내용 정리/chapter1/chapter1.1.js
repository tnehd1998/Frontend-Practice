// 1.1 왜 리액트인가?

// 자바스크립트는 초기에 간단한 연산을 하거나 시각적인 효과를 주는
// 단순한 스크립트 언어에 불과했음

// 현재는 웹 어플리케이션에서 가장 핵심적인 역할을 하는 언어로 자리매김함
// 서버사이드, 모바일, 데스크톱 영역에서도 활약하고 있음

// Electron: 데스크탑 어플리케이션 제작
// Ex) Slack, Atom, VS Code

// Ionic, Titanium, NativeScript, React Native : 모바일 어플리케이션 제작
// Ex) Facebook, Discord, Paypal, Ebay

// 수 많은 프레임워크가 조금씩 다른 관점에서 어플리케이션 구조를 관리하기 위한 문제를 해결하기 위해 노력
// MVC 아키텍처, MVVM 아키텍처를 사용함

// MVC : 모델과 뷰가 존재
// Model : 어플리케이션에서 사용하는 데이터를 관리하는 영역
// View : 사용자에게 보이는 부분
// Controller : 프로그램이 사용자에게서 어떤 작업을 받으면 모델 데이터를 조회하거나 수정하고,
//              변경된 사항을 뷰에 반영함

// 해당 정보를 반형하는 과정에서 View를 변형(mutate)시켜야함
// 업데이트하는 항목에 따라 어떤 부분을 찾아서 변경할지 규칙을 정하는 것은 간단하지만, 규모가 클수록
// 해당 작업이 복잡해지고, 성능 저하를 유발할 수 있음

// 페이스북 개발 팀이 고안해낸 아이디어
// -> 어떤 데이터가 변할 때마다 어떤 변화를 줄지 고민하는것이 아닌 기존 뷰를 날려버리고 처음부터
// 새로 렌더링하는 방식을 생각해냄
// -> 구조가 매우 간단하고, 작성해야 하는 코드양도 많이 줄어듬

// 최대한 성능을 아끼고 편안한 사용자 경험을 제공하면서 구현하고자 개발한 프로그램 => 🎉리액트🎉

// 1.1.1 리액트 이해

// 리액트 : MVC구조에서 오직 V만 신경 쓰는 라이브러리

// 컴포넌트 : 재사용이 가능한 API로 수많은 기능들을 내장하고 있는 것
// 렌더링 : 사용자 화면에 뷰를 보여주는 것

// 1.1.1.1 초기 렌더링

// 맨 처음에 어떻게 보일지를 정하는 초기 랜더링이 필요함
// 리액트에서는 이를 다루는 render함수가 존재함

// render함수 : 컴포넌트가 어떻게 생겼는지 정의하는 역할을 함, html형식의 문자열을 반환하지 않고,
// 뷰가 어떻게 생겼고 어떻게 작동하는지에 대한 정보를 지는 객체를 반환함

// 컴포넌트 내부에는 또 다른 컴포넌트들이 들어갈 수 있고, render함수를 실행시키면 내부 컴포넌트들도
// 재귀적으로 랜더링하게됨

// 최상위 컴포넌트의 랜더링 작업이 끝나면 지니고 있는 정보들을 사용하여 HTML 마크업을 만들고 해당
// 정보들을 실제 페이지의 DOM 요소 안에 주입함

// 컴포넌트를 실제 페이지에 랜더링할때의 절차
// 1. 문자열 형태의 HTML코드 생성
// 2. 특정 DOM에 해당 내용을 주입

// 1.1.1.2 조화 과정

// 리액트에서 뷰를 업데이트할 때는 "업데이트 과정을 거친다"보다 "조화 과정을 거친다"가 더 정확한 표현
// -> 컴포넌트 변화가 있을 때 우리가 보기에는 변화에 따라 뷰가 변형되는 것처럼 보이지만, 사실은
// 새로운 요소를 갈아 끼우는 작업을 하기 때문

// 해당 작업 또한 render함수가 맡아서 작동됨
// 컴포넌트는 데이터를 업데이트했을 때 새로운 데이터를 가지고 render함수를 다시 호출함
// -> 해당 데이터를 지닌 뷰를 생성

// 해당 결과를 곧바로 DOM에 반영하지 않고 이전에 render함수가 만들었던 컴포넌트 정보와 현재
// render함수가 만든 컴포넌트 정보를 비교함

// 자바스크립트를 사용하여 두 가지 뷰를 최소한의 연산으로 비교한 후, 둘의 차이를 알아내 최소한의
// 연산으로 DOM트리를 업데이트함 => Virtual DOM을 사용한다는 의미
