// 22.1 소개하기

// 서버를 개발할 때 데이터베이스를 사용하면 웹 서비스에서 사용되는 데이터를 저장하고,
// 효율적으로 조회하거나 수정할 수 있음

// 관계형 데이터베이스 (MySQL, OracleDB, PostgreSQL)의 한계
// 1. 데이터 스키마가 고정적이다
// - 새로 등록하는 데이터 형식이 기존에 있던 데이터들과 다르다면 기존 데이터를 모두 수정해야 새 데이터를 등록 가능
// - 데이터 량이 많을 때는 데이터베이스의 스키마를 변경하는 작업이 매우 번거로움
// 2. 확장성이 좁음
// - 관계형 데이터베이스는 저장하고 처리해야 할 데이터양이 늘어나면 여러 컴퓨터에 분산시키는 것이 아니라,
// 해당 데이터베이스 서버의 성능을 업그레이드하는 방식으로 확장해 주어야 했음

// MongoDB는 이런 한계를 극복한 문저 지향적 NoSQL 데이터베이스임
// - 유동적인 스키마를 지닐수 있음
// - 서버의 데이터양이 늘어나도 한 컴퓨터에서만 처리하는 것이 아니라 여러 컴퓨터로 분산하여 처리할 수 있게됨

// 상황별로 더 좋은 데이터베이스가 다름, 그렇기 때문에 상황에 맞게 유동적으로 사용해야 함
// - 데이터의 구조가 자주 바뀐다면 MongoDB가 유리함
// - 까다로운 조건으로 데이터를 필터링하거나, ACID 특성을 지켜야 한다면 관계형 데이터베이스가 유리함

// ACID (Atomicity, Consistency, Isolation, Durability)
// - 데이터베이스 트랜잭션이 안전하게 처리되는 것을 보장하기 위한 성질을 의미

// 22.1.1 문서란?

// 관계형 데이터베이스의 레코드와 개념이 비슷하며, 문서의 데이터 구조는 한 개 이상의 키-값 쌍으로 되어 있음
// 문서는 BSON(바이너리 형태의 JSON) 형태로 저장되어, 나중에 JSON 형태의 객체를 데이터베이스에 등록하기 편리함
// 새로운 문서를 만들면 사간, 머신 아이디, 프로세스 아디이, 순차번호로 되어 있는 _id라는 고유값을 자동으로 생성하며
// 해당 값의 고유함을 보장함

// 여러 문서가 들어있는 곳을 컬렉션이라고 하는 데,
// 기존 RDBMS에서는 테이블 개념을 사용하므로 각 테이블마다 같은 스키마를 가지고 있어야 함
// 새로 등록할 데이터가 다른 스키마를 가지고 있다면, 기존 데이터들의 스키마도 모두 바꿔줘야함
// MongoDB는 다른 스키마를 가지고 있는 문서들이 한 컬렉션에서 공존할 수 있음

// 22.1.2 MongoDB 구조

// 서버 하나에 데이터베이스를 여러 개 가지고 있을수 있음
// 각 데이터베이스에는 여러 개의 컬렉션이 있으며, 컬렉션 내부에는 문서들이 들어 있음

// 22.1.3 스키마 디지인

// RDBMS에서 블로그용 데이터 스키마를 설계한다면 각 포스트, 댓글마다 테이블을 만들어 필요에 따라 JOIN해서 사용함
// 하지만 NoSQL에서는 그냥 모든 것을 문서 하나에 넣음
// MongoDB는 문서 내부에 또 다른 문서가 위치할 수 있으며 이를 서브다큐먼트(subdocument)라고 함
// 문서 하나에 최대 16MB만큼 데이터를 넣을수 있으며, 문서 하나에 댓글 데이터를 약 68,000개 넣을수 있음
// 서브다큐먼트에서 해당 용량을 초과할 가능성이 있으면 컬렉션을 분리시키는 것이 좋음

// 22.5 데이터베이스의 스키마와 모델

// mongoose에서 스키마와 모델이라는 개념이 있는데, 이 둘은 혼동하기가 쉬움
// 스키마는 컬렉션에 들어가는 문서 내부의 각 필드가 어떤 형식으로 되어 있는지 정의하는 객체
// 모델은 스키마를 사용하여 만드는 인스턴스로, 데이터베이스에서 실제 작업을 처리할 수 있는 함수들을 지닌 객체
