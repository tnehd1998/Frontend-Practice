// 16.1 리덕스 개념 미리 정리하기

// 리덕스는 가장 많이 사용하는 리액트 상태 관리 라이브러리이다
// 리덕스를 사용하면 컴포넌트의 상태 업데이트 관련 로직을 다른 파일로 분리시켜 효울적으로 관리 가능
// 특정 컴포넌트끼리 똑같은 상태를 공유해야 할 때도 여러 컴포넌트를 거치지 않고 손쉽게 상태 값 전달 및 업데이트 가능

// 단순히 전역 상태 관리만 한다면 Context API를 사용하는 것만으로도 충분함
// 하지만 리덕스를 사용하면 상태를 더욱 체계적으로 관리할 수 있기 때문에
// 프로젝트의 규모가 클 경우에는 리덕스를 사용하는 편이 좋음

// 리덕스는 코드의 유지 보수성도 높여 주고 작업 효율도 극대화해 주고,
// 추가로 아주 편리한 개발자 도구도 지원하며,
// 미들웨어라는 기능을 제공하여 비동기 작업을 훨씬 효율적으로 관리할 수 있게 해줌

// 16.1.1 액션 (action)
// 상태에 어떠한 변화가 필요하면 하나의 객체로 표현되는 액션이라는 것이 발생함
// 액션 객체는 type 필드를 반드시 가지고 있고 그외의 값들은 나중에 상태 업데이트를 할 때 참고할 값들이다

// 16.1.2 액션 생성 함수 (action creator)
// 액션 객체를 만들어 주는 함수
// 어떤 변화를 일으켜야 할 때마다 액션 객체를 만들어야 하는데 사용하는 매번 만들기보단,
// 함수로 만들어서 관리함으로써 실수를 하는 경우를 방지함

// 16.1.3 리듀서 (reducer)
// 변화를 일으키는 함수
// 액션을 만들어서 발생시키면 리듀서가 현재 상태와 전달받은 액션 객체를 파라미터로 받아옴
// 두 값을 참고하여 새로운 상태를 만들어서 반환해줌

// 16.1.4 스토어 (store)
// 프로젝트에 리덕스를 적용하기 위해 스토어를 만듬
// 한 개의 프로젝트는 단 하나의 스토어만 가질 수 있음
// 스토어 안에는 현재 어플리케이션 상태와 리듀서가 들어가 있으며,
// 그외에도 몇 가지 중요한 내장 함수를 지님

// 16.1.5 디스패치 (dispatch)
// 스토어의 내장 함수 중 하나
// 디스패치는 "액션을 발생시키는 것"이라고 이해하면 됨
// 해당 함수가 호출되면 스토어는 리듀서 함수를 실행시켜서 새로운 상태를 만들어줌

// 16.1.6 구독 (subscribe)
// 스토어의 내장 함수 중 하나
// subscribe 함수 안에 리스터 함수를 파라미터로 넣어서 호출해 주면,
// 이 리스너 함수가 액션이 디스패치되어 상태가 업데이트될 때마다 호출됨
