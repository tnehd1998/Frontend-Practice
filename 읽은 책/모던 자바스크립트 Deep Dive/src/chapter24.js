// Chapter 24) 클로저
// 자바스크립트 고유의 개념이 아닌 함수형 프로그래밍 언어에서 사용되는 특성

const x = 1;
function outerFunc() {
  const x = 10;
  innerFunc();
}
function innerFunc() {
  console.log(x); // 1
}
outerFunc();

// 이러한 현상은 자바스크립트가 렉시컬 스코프를 따르는 프로그래밍 언어이기 때문

// 1) 렉시컬 스코프
// 자바스크립트 엔진은 함수를 어디서 호출했는지가 아니라 함수를 어디에
// 정의했는지에 따라 상위 스코프를 결정한다

// 2) 함수 객체의 내부 슬롯 [[Environment]]
// 함수는 자신의 내부 슬롯 [[Environment]]에 자신이 정의된 환경,
// 즉 상위 스코프의 참조를 저장한다

// 3) 클로저와 렉시컬 환경
// 클로저 : 외부 함수보다 중첩함수가 더 오래 유지되는 경우 중첩 함수는 이미
// 생명 주기가 종료한 외부 함수의 변수를 참조하는 중첩 함수

// 자바스크립트의 모든 함수는 상위 스코프를 기억하므로 이론적으로 모든 함수는
// 클로저라는 조건을 만족함, 하지만 일반적으로 모든 함수를 클로저라 하지 않음

// 4) 클로저의 활용
// 클로저는 상태를 안전하게 변경하고 유지하기 위해 사용한다

// 5) 캡슐화와 정보 은닉
// 캡슐화 : 객체의 상태를 나타내는 프로퍼티와 프로퍼티를 참조하고 조작할 수
// 있는 동작인 메서드를 하나로 묶는 것
// 정보 은닉 : 객체의 특정 프로퍼티나 메서드를 감출 목적으로 캡슐화하여
// 사용하는 것
