// Chapter 1 리팩터링: 첫 번째 예시

// ✅ 프로그램이 새로운 기능을 추가하기에 편한 구조가 아니라면, 먼저 기능을 추가하기 쉬운 형태로 리팩터링하고 나서
// 원하는 기능을 추가한다

// 프로젝트를 진행하면서 새로운 수많은 요구사항들이 주어지게 된다
// 리팩터링을 하지 않으면 요구사항에 따라 변경을 할때 로직을 파악하기가 힘들다

// 리팩터링의 첫단계 : 리팩터링할 코드 영역을 꼼꼼하게 검사해줄 테스트 코드들부터 마련해야 한다

// ✅ 리팩터링하기 전에 제대로 된 테스트부터 마련한다. 테스트는 반드시 자가진단하도록 만든다

// 테스트를 작성하는 데 시간이 걸리더라도 신경써서 테스트 코드를 잘 만들어 두면 디버깅 시간이 줄어 오히려
// 전체 작업 시간은 단축된다.

// 간단한 수정의 리팩터링이라도 항상 테스트하는 습관을 들이는게 매우 중요함
// 조금씩 변경하고 매번 테스트하는 것이 리팩터링 절차의 핵심이다

// 한 번에 많은 것을 수정하다가 실수를 저질러 이후에 수정하는것보다 조금씩 수정하여
// 피드백 주기를 짧게 가져가는 습관이 오히려 작업 시간이 덜 걸리게 된다.

// ✅ 리팩터링은 프로그램 수정을 작은 단계로 나눠 진행한다. 그래서 중간에 실수하더라도 버그를 쉽게 찾을 수 있다

// 자바스크립트와 같은 동적 타입 언어를 사용할 때는 타입이 드러나게 작성하면 도움이 된다
// 매개변수의 역할이 뚜렷하지 않을 때는 부정관사(a/an)을 붙인다

// ✅ 컴퓨터가 이해하는 코드는 바보도 작성할 수 있다. 사람이 이해하도록 작성하는 프로그래머가 진정한 실력자다.

// 지역 변수를 제거해서 얻는 가장 큰 장점은 추출 작업이 훨씬 쉬워진다는 점

// 긴 함수를 작게 쪼개는 리팩터링은 이름을 잘 지어야만 효과가 있다

// 리팩터링이 성능에 상당한 영향을 주기도 하지만 그런 경우라도 개의치 않고 리팩터링을 한다
// 잘 다듬어진 코드는 성능 개선 작업도 훨씬 수월하기 때문
// 리팩터링 과정에서 성능이 크게 떨어졌다면 리팩터링 후 시간을 내어 성능을 개선함

// 📌 리팩터링으로 인한 성능 문제에 대한 조언은 "특별한 경우가 아니라면 일단 무시하라"라는 것
// 리팩터링 때문에 성능이 떨어진다면, 하던 리팩터링을 마무리하고 나서 성능을 개선할 것
