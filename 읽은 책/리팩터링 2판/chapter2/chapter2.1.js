// 2.1 리팩터링 정의

// ✅ 리팩터링 : [명사] 소프트웨어의 겉보기 동작은 그대로 유지한 채,
// 코드를 이해하고 수정하기 쉽도록 내부 구조를 변경하는 기법

// ✅ 리팩터링(하다): [동사] 소프트웨어의 겉보기 종각은 그대로 유지한 채,
// 여러 가지 리팩터링 기법을 적용해서 소프트웨어를 재구성하다.

// 수많은 사람이 코드를 정리하는 작업을 모조리 "리팩터링"이라고 표현하고 있는데,
// 코드를 정리하는 것만이 리팩터링이다.

// ✅ 누군가 "리팩터링하다가 코드가 깨져서 며칠이나 고생했다"라고 한다면, 십중팔구 리팩터링한 것이 아니다.

// 재구성 : 코드베이스를 정리하거나 구조를 바꾸는 모든 작업

// 한번에 바꿀 수 있는 작업을 여러 단계로 쪼개 작업하는 모습을 처음 접하면 리팩터링이 비효율적이라고 오해함
// 하지만 잘게 나눔으로써 오히려 작업을 더 빨리 처리할 수 있다.
// 단계들이 체계적으로 구성되어 있기도 하고, 디버깅하는데 시간을 뺏기지 않음

// 리팩터링은 성능 최적화와 비슷하다.
// 목적이 다를 뿐, 둘 다 코드를 변경하지만 프로그램의 전반적인 기능은 그대로 유지함
// 리팩터링의 목적 : 코드를 이해하고 수정하기 쉽게 만드는 것, 성능이 좋아질 수도, 나빠질 수도 있다
// 성능 최적화의 목적 : 오직 속도 개선에만 신경 쓴다
// 목표 성능에 반드시 도달해야 한다면 코드는 다루기에 더 어렵게 바뀔 수도 있음을 각오해야 한다
