// 2.8 리팩터링과 성능

// 리팩터링하면 소프트웨어가 느려질 수도 있는 건 사실이다.
// 하지만 그와 동시에 성능을 튜닝하기는 더 쉬워진다.
// 하드 리얼타임 시스템을 제외한 소프트웨어를 빠르게 만드는 비결은,
// 먼저 튜닝하기 쉽게 만들고 나서 원하는 속도가 나게끔 튜닝하는 것이다.

// 경험한 빠른 소프트웨어를 작성하는 세가지 방법

// 1. 시간 예산 분배(Time Budgeting)

// 가장 엄격한 방법이며 하드 리얼타임 시스템에서 많이 사용한다.
// 설계를 여러 컴포넌트로 나눠서 컴포넌트마다 자원(시간과 공간) 예산을 할당한다.
// 할당된 자원 예산을 초과할 수 없으며, 엄격한 시간 엄수를 강조한다.
// 사내 정보 시스템과 같은 부류에는 맞지 않는 기법이다.

// 2. 끊임없이 관심을 기울이는 것

// 노력한 시간에 비해 충분한 보상이나 성과가 나오지 않을 가능성이 매우 높다.
// 선능에 대한 흥미로운 사실은, 대부분 프로그램은 전체 코드 중 극히 일부에서 대부분의 시간을 소비한다.

// 3. 의도적으로 성능 최적화에 돌입하기 전까지는 성능에 신경 쓰지 않고
// 코드를 다루기 쉽게 만드는데 집중한다.

// 성능 최적화 단계가 되면 다음의 구체적인 절차를 따라 프로그램을 튜닝한다.
// 리팩터링할 때처럼 최적화를 위한 수정도 작은 단계로 나눠서 진행한다.
// 사용자가 만족하는 성능에 도달할 때까지 최적화 대상을 찾아서 제거하는 일을 계속한다.

// 프로그램을 잘 리팩터링해두면 최적화에 도움되는 두 가지 면

// 1. 성능 튜닝에 투입할 시간을 벌 수 있다.
// 2. 리팩터링이 잘 되어 있는 프로그램은 성능이 더 세밀하게 분석할 수 있다.

// 리팩터링은 성능 좋은 소프트웨어를 만드는 데 기여한다.
// 단기적으로 보면 리팩터링 단계에서는 성능이 느려질 수도 있다.
// 하지만 최적화 단계에서 코드를 튜닝하기 훨씬 쉬워지기 때문에 결국 더 빠른 소프트웨어를 얻게 된다.
