// 2.6 리팩터링, 아키텍처, 애그니(YAGNI)

// 리팩터링이 아키텍처에 마치는 실질적인 효과는 요구사항 변화에 자연스럽게 대응하도록 코드베이스를
// 잘 설계해준다는 데 있다.

// 설계하는 방식을 간결한 설계, 점진적 설계, YAGNI 등으로 부른다
// YAGNI : You Aren't Going to Need It

// YAGNI를 받아들인다고 해서 선제적인 아키텍처에 완전히 소홀해도 된다는 뜻이 아니다.
// 리팩터링으로는 변경하기 어려워서 미리 생각해두면 시간이 절역되는 경우도 얼마든지 있다.
// 다만 이제는 둘 사이의 균형점이 크게 달라졌고, 나중에 문제를 더 깊이 이해하게 됐을 때 처리하는 쪽이
// 훨씬 낫다는 의견이다.

// 이러한 경향은 진화형 아키텍처 원칙이 발전하는 계기가 됐다
// 진화형 아키텍쳐: 아키텍쳐 관련 결정을 시간을 두고 반복해 내릴 수 있다는 장점을
// 활용하는 패턴과 실천법을 추구하는 것
