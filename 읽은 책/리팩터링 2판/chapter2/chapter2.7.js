// 2.7 리팩터링과 소프트웨어 개발 프로세스

// 리팩터링의 첫 번째 토대는 자가 테스트 코드다.
// 다시 말해 프로그래밍 도중 발생한 오류를 확실히 걸러내는 테스트를 자동으로 수행할 수 있어야 한다.

// 팀으로 개발하면서 리팩터링을 하려면 각 팀원이 다른 사람의 작업을 방해하지 않으면서 언제든지
// 리팩터링할 수 있어야 하며, 지속적 통합(CI)을 적극 권장하는 이유도 이 때문이다.

// 자가 테스트 코드, 지속적 통합, 리팩터링이라는 세 기법은 서로 강력한 상승효과를 발휘한다.
// 세 가지 실천법을 잘 조화시키면 요구사항 변화에 재빠르게 대응하고,
// 안정적인 선순환 구조를 코드베이스에 심을 수 있다.

// 지속적 배포(CD)는 소프트웨어를 언제든 릴리스할 수 있는 상태로 유지해준다.
// 웹 사이트를 개발하는 조직은 수정사항을 하루에도 여러 차례 릴리스할 수 있게 된다.
// 위험요소도 줄이고, 기술적인 제약보다는 비즈니스 요구에 맞춰 릴리스 일정을 계획할 수 있다.
