// 6.6 변수 캡슐화하기

let defaultOwner = { firstName: "Billy", lastName: "Lee" };

let fixedDefaultOwner = { firstName: "Billy", lastName: "Lee" };
export function defaultOwner() {
  return fixedDefaultOwner;
}
export function setDefaultOwner(arg) {
  fixedDefaultOwner = arg;
}

// 📌 배경

// 리팩터링은 결국 프로그램의 요소를 조작하는 일이고, 함수는 데이터보다 다루기가 수월하다.
// 함수를 사용한다는 것은 결국 호출한다는 뜻이고, 함수의 이름을 바꿔 다른 모듈로 옮기기나,
// 기존 함수를 그대로 둔 채 전달 함수로 활용할 수도 있다.

// 데이터는 함수보다 다루가가 까다로운데, 그 이유는 함수처럼 처리할 수 없기 때문이다.
// 데이터는 참조하는 모든 부분을 한 번에 바꿔야 코드가 제대로 작동한다.

// 접근할 수 있는 범위가 넓은 데이터를 옮길 때는 먼저 그 데이터로의 접근을 독점하는 함수를
// 만드는 식으로 캡슐화하는 것이 가장 좋은 방법일 때가 많다.

// 📌 절차

// 1. 변수로의 접근과 갱신을 전담하는 캡슐화 함수들을 만든다.
// 2. 정적 검사를 수행한다.
// 3. 변수를 직접 참조하던 부분을 모두 적절한 캡슐화 함수 호출로 바꾼다.
// 하나씩 바꿀 때마다 테스트한다.
// 4. 변수의 접근 범위를 제한한다.
// 5. 테스트한다.
// 6. 변수 값이 레코드라면 레코드 캡슐화하기를 적용할지 고려해본다.
